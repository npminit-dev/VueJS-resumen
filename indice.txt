
main.js: inicializacion y montaje de una aplicacion de vuejs, uso de librerias e instancias de aplicaciones multiples.
App.vue: aqui se renderizaran los componentes de cada una de las partes de la documentacion:

Los capitulos se encuentran en la carpeta src/components, los componentes auxiliares se encuentran en src/test_component

Capitulo 1: conceptos basicos (carpeta essentials):

  1_TemplateSyntax: SFC, Composition API, interpolacion de texto, 
  directivas v-html, v-bind (shorthands y booleans), binds multiples, expresiones, directivas, modificadores.

  2_ReactivityFundamentals: ref, shallowRef, reactive (proxies), shallowReactive, actualizaciones profundas, 
  reglas de unwrapping automatico de refs y proxies, nextTick

  3_ComputedProperties: valores computados con posibilidad de modificacion

  4_ClassAndStyleBinding: binding de clases y estilos mediante arreglos y objetos, binding condicional, prefixes.

  5_ConditionalRender: v-if, v-else-if, v-else, v-show

  6_ListRender: v-for sobre arrays y sobre objetos, interaccion con v-if, renderizado de listas componentes.

  7_EventHandlers: manejadores de eventos, modificadores, shorthands

  8_FormBindings: binding 'estandar', directiva v-model, casos de uso con inputs/checkboxs/textareas/selects, renderizado dinamico, 
  'value' dinamico, modificadores de v-model, binding de valores 'no string', true-value/false-value.

  9_LifeCycleHooks: onBeforeMount, onBeforeUpdate, onErrorCaptured, onMounted, onRenderTracked, onRenderTriggered, 
  onUpdated, onActivated, onDeactivated, onServerPrefetch

  10_Watchers: watcher, watcherEffect, funcionamiento con distintas dependencias, propiedades 'inmediate' y 'flush', watchers asincronos.

  11_TemplateRefs: referencias a nodos del DOM (bindeadas mediante string y mediante funciones), referencias a componentes.

  12_ComponentEssentials: definicion y paso de props a componentes hijos, escucha de eventos emitidos por los hijos, 
  componente <slot/>, renderizado dinamico de componentes, advertencias.


Capitulo 2: componentes en profundidad (carpeta components_indepth):

  1_Registration: registro local y global, ventajas y desventajas, uso de PascalCase y kebab-case

  2_Props: Paso de distintos tipos de dato, distintas formas de pasar props, distintas formas de tipar las props, validaciones avanzadas.

  3_Events: $emit, emision y escucha de eventos entre hijo/padre, 
  recepcion de argumentos al escuchar eventos, modificador .once, comparacion con eventos nativos del DOM

  4_ComponentVModel: v-model para comunicacion bidireccional entre componentes, binding multiple, validaciones, modificadores.

  5_FallThroughAttributes: paso de atributos y event listeners no declarados a componentes, 
  paso a nodo raiz, paso a nodo arbitrario, variable $attrs, macro useAttrs()

  6_Slots: slot sin nombre, slots nombrados, multiple slots en un componente, 
  props de slots y slots scopes, componentes 'renderless', contenido por defecto para los slots no usados.

  7_Provide/Inject: Proveedores y consumidores de dependencias, provide/inject, proveedor a nivel de aplicacion, 
  funcion readonly, claves mediante Symbol()

  8_AsyncComponents: defineAsyncComponent, funcion import, componentes de carga y error


Capitulo 3: Reusabilidad (carpeta reusability):

  1_Composable: creacion y uso de composables para reutilizacion de l√≥gica, composables con estado global, funcion 'toValue', buenas practicas.

  2_CustomDirectives: directivas locales y de ambito de aplicacion, acceso a argumento, modificadores y valores.

  3_Plugins: PENDIENTE!


Capitulo 4: Componentes incorporados:

  TransitionComponent: 